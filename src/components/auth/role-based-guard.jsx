
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import React, { useEffect, useState } from "react";

export const ROLE = {
  ADMIN: "admin",
  SUPER_ADMIN: "super_admin",
  FACULTY_ADMIN: "faculty_admin",
  ALUMNI: "alumni",
  GUEST: "guest",
  INSTRUCTOR: "instructor",
};

const RoleBasedGuard = ({ allowedRoles, children, fallback, returnTo }) => {
    console.log("üöÄ ~ RoleBasedGuard ~ allowedRoles:", allowedRoles);
    
  // logic
  const { data: session, status } = useSession();
  const [authorized, setAuthorized] = useState(false);
 
  const router = useRouter();
  // ‡πÅ‡∏õ‡∏•‡∏á allowedRoles ‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏™‡∏°‡∏≠
  const roleArray = Array.isArray(allowedRoles) ? allowedRoles : [allowedRoles];

  useEffect(() => {
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ session ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏°‡∏±‡πä‡∏¢
    if (status === "loading") return;

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ session ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
    if (!session || status === "unauthenticated") {
      router.push("/login");
      // ‡∏ñ‡πâ‡∏≤ session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      setAuthorized(false);
      return;
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ session ‡πÅ‡∏•‡πâ‡∏ß
    const userRole = session?.user?.role || ROLE.GUEST;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const hasPermission = roleArray.includes(userRole);

    // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡πç‡∏≤‡∏´‡∏ô‡∏î returnTo ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ returnTo
    if (!hasPermission && returnTo) {
      router.push(returnTo);
    }
    // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
    setAuthorized(hasPermission); //true
  }, [status, session]);

  // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ‡∏´‡∏£‡∏∑‡∏≠ loading session
  if (status === "loading") return <div>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå</div>;
    
  // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
  if (!authorized && fallback) {
    return fallback || <div>authorized</div>;
  }

  // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
  return authorized ? children : null;
};

export default RoleBasedGuard;
