import { db } from "../db.config";
import { generatePromptPayQR } from "../utils/promptpay-genarate";
import { handleUploadFile } from "../utils/upload-file";
import { v4 as uuidv4 } from "uuid";

export const ordersController = {
  CreateOrderAndQrCode: async (body) => {
    // ‡∏ñ‡πâ‡∏≤ insert ‡∏´‡∏•‡∏≤‡∏¢ table
    //‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ transetion 

    // begin
    // 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç ref ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
    // 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πà‡πâ‡∏≠
    // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á qr code ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    // 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    // 7. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
    // commit

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á ‡πÉ‡∏´‡πâ
    // rollback
    try {
      //qr
      const { userId, name, email, phone, address, items, total } = body;

      return await db.tx(async (t) => {
        // 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        let totalAmount = 0;
        const orderItems = [];
        // ‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤ item ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for (const item of items) {
          const product = await t.oneOrNone(
            `SELECT * FROM public.products WHERE id = $1;`,
            [item.id]
          );

          if (!product) {
            throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${item.name}`);
          }

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏û‡∏≠‡πÑ‡∏´‡∏°
          if (product.stock_quantity < item.quantity) {
            throw new Error(`‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏≠ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${product.stock_quantity})`);
          }

          // ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏ß‡πâ
          totalAmount += product.price * item.quantity;

          orderItems.push({
            productId: product.id,
            quantity: item.quantity,
            price: product.price,
          });

          // update ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
          await t.none(
            `UPDATE products SET stock_quantity = stock_quantity - $1, updated_at = NOW() WHERE id = $2`,
            [item.quantity, product.id]
          );
        }

        // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç ref ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        const paymentReference = uuidv4().substring(0, 8).toUpperCase();

        // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
        const order = await t.one(
          `
            INSERT INTO orders (
            user_id,
            total_amount,
            payment_reference,
            customer_name,
            customer_email,
            customer_phone,
            customer_address ) VALUES ($1,$2,$3,$4,$5,$6,$7) 
            RETURNING id
          `,
          [userId, totalAmount, paymentReference, name, email, phone, address]
        );

        // 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πà‡πâ‡∏≠
        for (const item of orderItems) {
          await t.none(
            `INSERT INTO order_items (order_id,product_id,quantity,price_at_time) VALUES ($1,$2,$3,$4)`,
            [order.id, item.productId, item.quantity, item.price]
          );
        }

        const promptpayId = process.env.PROMPTPAY_ID;
        // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á qr code ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        const qrcodePay = await generatePromptPayQR(promptpayId, total);

        // 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        await t.none(
          `INSERT INTO payment_transactions (order_id,qrcode_data,amount,transaction_reference) VALUES ($1,$2,$3,$4)`,
          [order.id, qrcodePay, totalAmount, paymentReference]
        );

        // 7. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
        return {
          success: true,
          orderId: order.id,
          paymentReference,
          totalAmount,
          qrcodeUrl: qrcodePay,
          promptpayId,
        };

      });

    } catch (error) {
      console.log("üöÄ ~ CreateOrderAndQrCode: ~ error:", error);
      throw new Error(error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
    }
  },
};
